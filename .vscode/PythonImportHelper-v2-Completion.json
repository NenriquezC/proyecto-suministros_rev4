[
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "ProtectedError",
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "isExtraImport": true,
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "ROUND_HALF_UP",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "ROUND_HALF_UP",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "ROUND_HALF_UP",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "ROUND_HALF_UP",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "inlineformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ExpressionWrapper",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ProtectedError",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ExpressionWrapper",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ExpressionWrapper",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ExpressionWrapper",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ProtectedError",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "Producto",
        "importPath": "inventario.models",
        "description": "inventario.models",
        "isExtraImport": true,
        "detail": "inventario.models",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "importPath": "inventario.models",
        "description": "inventario.models",
        "isExtraImport": true,
        "detail": "inventario.models",
        "documentation": {}
    },
    {
        "label": "Producto",
        "importPath": "inventario.models",
        "description": "inventario.models",
        "isExtraImport": true,
        "detail": "inventario.models",
        "documentation": {}
    },
    {
        "label": "Producto",
        "importPath": "inventario.models",
        "description": "inventario.models",
        "isExtraImport": true,
        "detail": "inventario.models",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "importPath": "inventario.models",
        "description": "inventario.models",
        "isExtraImport": true,
        "detail": "inventario.models",
        "documentation": {}
    },
    {
        "label": "Producto",
        "importPath": "inventario.models",
        "description": "inventario.models",
        "isExtraImport": true,
        "detail": "inventario.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "permission_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "permission_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "TruncDate",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "TruncDate",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Least",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Compra",
        "importPath": "compras.models",
        "description": "compras.models",
        "isExtraImport": true,
        "detail": "compras.models",
        "documentation": {}
    },
    {
        "label": "Compra",
        "importPath": "compras.models",
        "description": "compras.models",
        "isExtraImport": true,
        "detail": "compras.models",
        "documentation": {}
    },
    {
        "label": "Venta",
        "importPath": "ventas.models",
        "description": "ventas.models",
        "isExtraImport": true,
        "detail": "ventas.models",
        "documentation": {}
    },
    {
        "label": "VentaProducto",
        "importPath": "ventas.models",
        "description": "ventas.models",
        "isExtraImport": true,
        "detail": "ventas.models",
        "documentation": {}
    },
    {
        "label": "Venta",
        "importPath": "ventas.models",
        "description": "ventas.models",
        "isExtraImport": true,
        "detail": "ventas.models",
        "documentation": {}
    },
    {
        "label": "VentaProducto",
        "importPath": "ventas.models",
        "description": "ventas.models",
        "isExtraImport": true,
        "detail": "ventas.models",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "require_GET",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "index",
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "isExtraImport": true,
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "compras.migrations.0001_initial",
        "description": "compras.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('inventario', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Compra',\n            fields=[",
        "detail": "compras.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "compras.migrations.0002_remove_compraproducto_compra_descuento_0_100_and_more",
        "description": "compras.migrations.0002_remove_compraproducto_compra_descuento_0_100_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('compras', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveConstraint(\n            model_name='compraproducto',\n            name='compra_descuento_0_100',\n        ),\n        migrations.RenameField(",
        "detail": "compras.migrations.0002_remove_compraproducto_compra_descuento_0_100_and_more",
        "documentation": {}
    },
    {
        "label": "CompraProductoInline",
        "kind": 6,
        "importPath": "compras.admin",
        "description": "compras.admin",
        "peekOfCode": "class CompraProductoInline(admin.TabularInline):\n    \"\"\"\n    Inline tabular para editar/visualizar líneas (CompraProducto) dentro de Compra.\n    Notas:\n    - `extra=0` evita filas vacías no deseadas.\n    - `total_linea` es de solo lectura (se calcula en el modelo).\n    - `show_change_link=True` permite abrir la línea en su admin propio.\n    \"\"\"\n    model = CompraProducto\n    extra = 0",
        "detail": "compras.admin",
        "documentation": {}
    },
    {
        "label": "CompraAdmin",
        "kind": 6,
        "importPath": "compras.admin",
        "description": "compras.admin",
        "peekOfCode": "class CompraAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin de la entidad Compra (cabecera).\n    Objetivo:\n    - Mostrar los campos clave (proveedor, usuario, fecha y totales).\n    - Permitir filtrar y buscar de forma rápida.\n    - Gestionar las líneas asociadas mediante inline tabular.\n    Detalles:\n    - `readonly_fields` asegura que los totales/auditoría no se editen a mano.\n    - `inlines` incorpora `CompraProductoInline` para trabajar líneas en la misma vista.",
        "detail": "compras.admin",
        "documentation": {}
    },
    {
        "label": "CompraProductoAdmin",
        "kind": 6,
        "importPath": "compras.admin",
        "description": "compras.admin",
        "peekOfCode": "class CompraProductoAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin de la entidad CompraProducto (línea de compra).\n    Objetivo:\n    - Consultar rápidamente líneas por compra y por producto.\n    - Evitar modificar el total calculado manualmente.\n    Detalles:\n    - `readonly_fields` protege `total_linea` y la fecha de creación.\n    - `list_filter` facilita navegación por producto/compra.\n    - `search_fields` permite buscar por nombre de producto y proveedor de la compra.",
        "detail": "compras.admin",
        "documentation": {}
    },
    {
        "label": "ComprasConfig",
        "kind": 6,
        "importPath": "compras.apps",
        "description": "compras.apps",
        "peekOfCode": "class ComprasConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'compras'",
        "detail": "compras.apps",
        "documentation": {}
    },
    {
        "label": "CompraForm",
        "kind": 6,
        "importPath": "compras.forms",
        "description": "compras.forms",
        "peekOfCode": "class CompraForm(forms.ModelForm):\n    \"\"\"\n    Form de cabecera para 'Compra'.\n    - Campo 'fecha' se maneja como <input type=\"date\">.\n    - Campo 'impuesto_total' en la UI se usa como PORCENTAJE (ej. 23),\n      pero NO se guarda directamente; el monto final lo calcula services.\n    - En edición, se muestra el PORCENTAJE calculado desde los importes guardados.\n    \"\"\"\n    fecha = forms.DateField(\n        widget=forms.DateInput(attrs={'type': 'date'}),",
        "detail": "compras.forms",
        "documentation": {}
    },
    {
        "label": "CompraProductoForm",
        "kind": 6,
        "importPath": "compras.forms",
        "description": "compras.forms",
        "peekOfCode": "class CompraProductoForm(forms.ModelForm):\n    \"\"\"\n    Form de línea para 'CompraProducto'.\n    Validaciones:\n        - cantidad > 0\n        - precio_unitario ≥ 0\n    Mensajes de error personalizados para mejorar feedback en UI.\n    \"\"\"\n    class Meta:\n        model = CompraProducto",
        "detail": "compras.forms",
        "documentation": {}
    },
    {
        "label": "CompraProductoFormSet",
        "kind": 5,
        "importPath": "compras.forms",
        "description": "compras.forms",
        "peekOfCode": "CompraProductoFormSet = inlineformset_factory(\n    parent_model=Compra,\n    model=CompraProducto,\n    form=CompraProductoForm,\n    fields=['producto', 'cantidad', 'precio_unitario'],   # sin 'descuento' (por decisión de UI/negocio)\n    extra=1,  # Mínimo 1 fila “en blanco” para añadir\n    can_delete=True,  # Permite marcar DELETE (modo “suave” en tu JS)\n    validate_min=True, # Enforce min_num a nivel de validación\n    min_num=1  # Al menos 1 línea por compra\n)",
        "detail": "compras.forms",
        "documentation": {}
    },
    {
        "label": "Compra",
        "kind": 6,
        "importPath": "compras.models",
        "description": "compras.models",
        "peekOfCode": "class Compra(models.Model):\n    \"\"\"\n    Cabecera de una compra.\n    Campos:\n        proveedor            FK → inventario.Proveedor (PROTECT)\n        usuario              FK → auth.User (o custom), registra quién creó la compra\n        fecha                Fecha/hora de la compra (default=timezone.now)\n        subtotal             Suma de líneas (≥ 0)\n        descuento_porcentaje Porcentaje 0..100 (entero pequeño)\n        impuesto_total       Monto total de impuestos (≥ 0)",
        "detail": "compras.models",
        "documentation": {}
    },
    {
        "label": "CompraProducto",
        "kind": 6,
        "importPath": "compras.models",
        "description": "compras.models",
        "peekOfCode": "class CompraProducto(models.Model):\n    \"\"\"\n    Línea de una compra (detalle por producto).\n    Campos:\n        compra          FK → Compra (CASCADE)\n        producto        FK → inventario.Producto (PROTECT)\n        cantidad        > 0 (entero positivo)\n        precio_unitario ≥ 0\n        total_linea     cantidad * precio_unitario (2 decimales, se recalcula en save)\n        creado_en       Timestamp de creación",
        "detail": "compras.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "compras.models",
        "description": "compras.models",
        "peekOfCode": "User = get_user_model()\n# ─────────────────────────────────────────────────────────────────────────────\n# Cabecera de compra\n# ─────────────────────────────────────────────────────────────────────────────\nclass Compra(models.Model):\n    \"\"\"\n    Cabecera de una compra.\n    Campos:\n        proveedor            FK → inventario.Proveedor (PROTECT)\n        usuario              FK → auth.User (o custom), registra quién creó la compra",
        "detail": "compras.models",
        "documentation": {}
    },
    {
        "label": "redondear_moneda",
        "kind": 2,
        "importPath": "compras.services",
        "description": "compras.services",
        "peekOfCode": "def redondear_moneda(importe: Decimal) -> Decimal:\n    \"\"\"\n    Redondea un importe a 2 decimales con HALF_UP (regla típica financiera).\n    Args:\n    importe: Decimal a redondear.\n    Returns:\n    Decimal con 2 decimales.\n    \"\"\"\n    return importe.quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n# ─────────────────────────────────────────────────────────────────────────────",
        "detail": "compras.services",
        "documentation": {}
    },
    {
        "label": "calcular_y_guardar_totales_compra",
        "kind": 2,
        "importPath": "compras.services",
        "description": "compras.services",
        "peekOfCode": "def calcular_y_guardar_totales_compra(compra: Compra,tasa_impuesto_pct: Decimal | None = None,) -> Compra:\n    Calcula subtotal, impuesto_total (opcional) y total de una compra y los persiste.\n    Reglas:\n    - subtotal = Σ(cantidad * precio_unitario) de las líneas (con precisión intermedia).\n    - impuesto_total:\n        * Si 'tasa_impuesto_pct' es un número (p.ej. 0.19 para 19%), se recalcula como:\n            impuesto_total = redondear(subtotal * tasa_impuesto_pct)\n        * Si es None, NO se recalcula (se respeta lo que venga de UI o estado previo).\n    - total = redondear(subtotal - descuento_total + impuesto_total)\n    - Todo se guarda con 2 decimales (redondeo HALF_UP).",
        "detail": "compras.services",
        "documentation": {}
    },
    {
        "label": "calcular_y_guardar_totales_compra",
        "kind": 2,
        "importPath": "compras.services",
        "description": "compras.services",
        "peekOfCode": "def calcular_y_guardar_totales_compra(\n    compra: Compra,\n    tasa_impuesto_pct: Decimal | None = None,\n) -> Compra:\n    \"\"\"\n    Calcula y persiste: subtotal, descuento_total (desde %), impuesto_total y total.\n    Impuesto se calcula sobre (subtotal - descuento).\n    \"\"\"\n    from decimal import Decimal\n    from django.db.models import F, Sum, DecimalField, ExpressionWrapper",
        "detail": "compras.services",
        "documentation": {}
    },
    {
        "label": "aplicar_stock_despues_de_crear_compra",
        "kind": 2,
        "importPath": "compras.services",
        "description": "compras.services",
        "peekOfCode": "def aplicar_stock_despues_de_crear_compra(compra: Compra) -> None:\n    \"\"\"\n    Ajusta stock tras crear una compra y actualiza metadata del producto.\n    Efectos por línea:\n    - Suma 'cantidad' al stock del producto.\n    - Actualiza 'precio_compra' con el último costo registrado.\n    - Ajusta 'stock_minimo' simple: 90% del stock total si supera el mínimo actual.\n    Args:\n        compra: Instancia de Compra recién creada (con líneas ya guardadas).\n    \"\"\"",
        "detail": "compras.services",
        "documentation": {}
    },
    {
        "label": "reconciliar_stock_tras_editar_compra",
        "kind": 2,
        "importPath": "compras.services",
        "description": "compras.services",
        "peekOfCode": "def reconciliar_stock_tras_editar_compra(\n    compra: Compra,\n    lineas_previas: Dict[int, Tuple[int, Decimal]],\n) -> None:\n    \"\"\"\n    Reconciliación de stock tras editar una compra (agregar/quitar/modificar líneas).\n    Estrategia:\n    - Líneas eliminadas: restar su cantidad del producto “viejo”.\n    - Líneas nuevas: sumar su cantidad al producto “nuevo”.\n    - Líneas persistentes:",
        "detail": "compras.services",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "compras.urls",
        "description": "compras.urls",
        "peekOfCode": "app_name = \"compras\"\nurlpatterns = [\n    # ────────────────────────────────\n    # LISTADO DE COMPRAS\n    # /compras/ver/\n    # Muestra todas las compras en tabla con filtros y paginación.\n    # Template: templates/compras/lista_compra/lista.html\n    # ────────────────────────────────\n    path(\"ver/\", views.ver_compras, name=\"ver_compras\"),\n    # ────────────────────────────────",
        "detail": "compras.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "compras.urls",
        "description": "compras.urls",
        "peekOfCode": "urlpatterns = [\n    # ────────────────────────────────\n    # LISTADO DE COMPRAS\n    # /compras/ver/\n    # Muestra todas las compras en tabla con filtros y paginación.\n    # Template: templates/compras/lista_compra/lista.html\n    # ────────────────────────────────\n    path(\"ver/\", views.ver_compras, name=\"ver_compras\"),\n    # ────────────────────────────────\n    # DETALLE DE COMPRA (SOLO LECTURA)",
        "detail": "compras.urls",
        "documentation": {}
    },
    {
        "label": "crear_compra",
        "kind": 2,
        "importPath": "compras.views",
        "description": "compras.views",
        "peekOfCode": "def crear_compra(request):\n    FORMS_PREFIX = \"lineas\"\n    if request.method == \"POST\":\n        data = request.POST.copy()\n        if data.get(\"descuento_total\") in (None, \"\"):\n            data[\"descuento_total\"] = \"0\"\n        form = CompraForm(data)\n        if form.is_valid():\n            compra = form.save(commit=False)\n            compra.usuario_id = request.user.pk",
        "detail": "compras.views",
        "documentation": {}
    },
    {
        "label": "editar_compra",
        "kind": 2,
        "importPath": "compras.views",
        "description": "compras.views",
        "peekOfCode": "def editar_compra(request, pk):\n    compra = get_object_or_404(Compra, pk=pk)\n    estado_previo_lineas = {l.pk: (l.producto_id, l.cantidad) for l in compra.lineas.all()}\n    if request.method == \"POST\":\n        data = request.POST.copy()\n        if data.get(\"descuento_total\") in (None, \"\"):\n            data[\"descuento_total\"] = \"0\"\n        form = CompraForm(data, instance=compra)\n        formset = CompraProductoFormSet(data, instance=compra, prefix=\"lineas\")\n        if form.is_valid() and formset.is_valid():",
        "detail": "compras.views",
        "documentation": {}
    },
    {
        "label": "ver_compras",
        "kind": 2,
        "importPath": "compras.views",
        "description": "compras.views",
        "peekOfCode": "def ver_compras(request):\n    \"\"\"\n    Lista paginada de compras con filtros básicos.\n    GET params:\n    - q:        texto libre (id icontains o proveedor.nombre icontains)\n    - desde:    fecha mínima (YYYY-MM-DD)\n    - hasta:    fecha máxima (YYYY-MM-DD)\n    - proveedor: id de proveedor\n    Optimización:\n    - select_related(\"proveedor\") evita N+1 en la tabla.",
        "detail": "compras.views",
        "documentation": {}
    },
    {
        "label": "ver_compra",
        "kind": 2,
        "importPath": "compras.views",
        "description": "compras.views",
        "peekOfCode": "def ver_compra(request, pk):\n    \"\"\"\n    Modo solo-lectura reutilizando la plantilla de edición.\n    - Deshabilita todos los campos del form y del formset.\n    - Bandera `readonly=True` para que la plantilla oculte botones/JS de edición.\n    \"\"\"\n    # NADA de POST acá: esta vista es solo lectura\n    compra = get_object_or_404(Compra.objects.select_related(\"proveedor\"), pk=pk)\n    # Deshabilitar campos del form principal\n    form = CompraForm(instance=compra)",
        "detail": "compras.views",
        "documentation": {}
    },
    {
        "label": "detalle_compra",
        "kind": 2,
        "importPath": "compras.views",
        "description": "compras.views",
        "peekOfCode": "def detalle_compra(request, pk): #recibe request y la clave primario PK de la compra que quiero mostrar\n    \"\"\"\n    Detalle de compra en solo-lectura.\n    Alias semántico de `ver_compra`, conservado por compatibilidad de URLs.\n    \"\"\"\n    #Busca la instancia de Compra con esa pk.\n    #Si no existe, lanza 404 automáticamente (no hay que escribir try/except).\n    compra = get_object_or_404(Compra, pk=pk)\n    # Form de cabecera deshabilitado\n    # Construye el formulario de cabecera (CompraForm) enlazado a la compra (instance=compra).",
        "detail": "compras.views",
        "documentation": {}
    },
    {
        "label": "eliminar_compra",
        "kind": 2,
        "importPath": "compras.views",
        "description": "compras.views",
        "peekOfCode": "def eliminar_compra(request, pk):\n    \"\"\"\n    Elimina una compra previa confirmación.\n    POST:\n    - Borra la compra\n    - Envía mensaje de éxito\n    - Redirige al listado\n    GET:\n    - Muestra plantilla de confirmación\n    \"\"\"",
        "detail": "compras.views",
        "documentation": {}
    },
    {
        "label": "agregar_compra",
        "kind": 5,
        "importPath": "compras.views",
        "description": "compras.views",
        "peekOfCode": "agregar_compra = crear_compra",
        "detail": "compras.views",
        "documentation": {}
    },
    {
        "label": "DashboardConfig",
        "kind": 6,
        "importPath": "dashboard.apps",
        "description": "dashboard.apps",
        "peekOfCode": "class DashboardConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'dashboard'",
        "detail": "dashboard.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "dashboard.urls",
        "description": "dashboard.urls",
        "peekOfCode": "app_name = \"dashboard\"\nurlpatterns = [\n    path(\"\", views.panel, name=\"panel\"),\n]",
        "detail": "dashboard.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "dashboard.urls",
        "description": "dashboard.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.panel, name=\"panel\"),\n]",
        "detail": "dashboard.urls",
        "documentation": {}
    },
    {
        "label": "panel",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def panel(request):\n    \"\"\"\n    Calcula y entrega datos para el dashboard (/dashboard/panel).\n    Flujo:\n    1) Fechas de referencia: hoy, inicio de mes, y rango de 14 días.\n    2) KPIs rápidas: totales de hoy y del mes (compras/ventas), contadores.\n    3) Top productos vendidos (cantidad).\n    4) Low stock: productos con stock ≤ stock_minimo.\n    5) Series 14 días: compras (TruncDate) y ventas.\n    6) Prepara payload `chart` para `json_script` en el template.",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def index(request):\n    \"\"\"\n    Renderiza el índice simple (/) con totales y lista resumida de low stock.\n    Flujo:\n    1) Cálculo de hoy e inicio de mes (y primer día del mes siguiente).\n    2) Totales HOY/MES para comprasy ventas (con Coalesce a 0).\n    3) Low stock: productos con stock ≤ stock_minimo (incluye igualdad).\n    4) Render de `index.html` con el contexto.\n    Parámetros:\n    request (HttpRequest)",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "inventario.migrations.0001_initial",
        "description": "inventario.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Categoria',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('nombre', models.CharField(max_length=100, unique=True)),",
        "detail": "inventario.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "inventario.migrations.0002_producto_producto_stock_gte_0_and_more",
        "description": "inventario.migrations.0002_producto_producto_stock_gte_0_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('inventario', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddConstraint(\n            model_name='producto',\n            constraint=models.CheckConstraint(condition=models.Q(('stock__gte', 0)), name='producto_stock_gte_0'),\n        ),\n        migrations.AddConstraint(",
        "detail": "inventario.migrations.0002_producto_producto_stock_gte_0_and_more",
        "documentation": {}
    },
    {
        "label": "ProductoAdmin",
        "kind": 6,
        "importPath": "inventario.admin",
        "description": "inventario.admin",
        "peekOfCode": "class ProductoAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin de Producto.\n    Notas:\n    - `stock_minimo` se calcula/ajusta vía lógica del modelo (save),\n        por eso permanece en solo lectura en el admin.\n    - `precio_venta_display` muestra el precio de venta en caso de usarse\n        en list_display (aquí NO se agrega para no cambiar tu vista actual).\n    \"\"\"\n    readonly_fields = ('stock_minimo',)",
        "detail": "inventario.admin",
        "documentation": {}
    },
    {
        "label": "CategoriaAdmin",
        "kind": 6,
        "importPath": "inventario.admin",
        "description": "inventario.admin",
        "peekOfCode": "class CategoriaAdmin(admin.ModelAdmin):\n    \"\"\"Admin de Categoria (listado simple por nombre).\"\"\"\n    list_display = ('nombre',)\n# ─────────────────────────────────────────────────────────────────────────────\n# Admin: Proveedor\n# ─────────────────────────────────────────────────────────────────────────────\nclass ProveedorAdmin(admin.ModelAdmin):\n    \"\"\"Admin de Proveedor (campos básicos, ordenados para lectura rápida).\"\"\"\n    list_display = ('nombre', 'direccion','telefono', 'tipo_proveedor',  'email', 'creado_en')\n# ─────────────────────────────────────────────────────────────────────────────",
        "detail": "inventario.admin",
        "documentation": {}
    },
    {
        "label": "ProveedorAdmin",
        "kind": 6,
        "importPath": "inventario.admin",
        "description": "inventario.admin",
        "peekOfCode": "class ProveedorAdmin(admin.ModelAdmin):\n    \"\"\"Admin de Proveedor (campos básicos, ordenados para lectura rápida).\"\"\"\n    list_display = ('nombre', 'direccion','telefono', 'tipo_proveedor',  'email', 'creado_en')\n# ─────────────────────────────────────────────────────────────────────────────\n# Registro de modelos\n# ─────────────────────────────────────────────────────────────────────────────\nadmin.site.register(Producto, ProductoAdmin)\nadmin.site.register(Categoria, CategoriaAdmin)\nadmin.site.register(Proveedor, ProveedorAdmin)",
        "detail": "inventario.admin",
        "documentation": {}
    },
    {
        "label": "InventarioConfig",
        "kind": 6,
        "importPath": "inventario.apps",
        "description": "inventario.apps",
        "peekOfCode": "class InventarioConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'inventario'",
        "detail": "inventario.apps",
        "documentation": {}
    },
    {
        "label": "ProveedorForm",
        "kind": 6,
        "importPath": "inventario.forms",
        "description": "inventario.forms",
        "peekOfCode": "class ProveedorForm(forms.ModelForm):\n    class Meta:\n        model = Proveedor\n        fields = \"__all__\"\n# ─────────────────────────────────────────────────────────────────────────────\n# FORM: ProductoForm\n# Propósito: CRUD de Producto con widgets básicos y validación defensiva.\n# ─────────────────────────────────────────────────────────────────────────────\nclass ProductoForm(forms.ModelForm):\n    class Meta:",
        "detail": "inventario.forms",
        "documentation": {}
    },
    {
        "label": "ProductoForm",
        "kind": 6,
        "importPath": "inventario.forms",
        "description": "inventario.forms",
        "peekOfCode": "class ProductoForm(forms.ModelForm):\n    class Meta:\n        model = Producto\n        # Temporalmente incluimos todo para que no falle por un campo mal referenciado.\n        fields = \"__all__\"\n        # IMPORTANTE: no pongas aquí labels/help_texts/widgets con claves inexistentes.\n        widgets = {\n            \"nombre\": forms.TextInput(attrs={\"placeholder\": \"Ej: Papel A4 80g\"}),\n            \"descripcion\": forms.Textarea(attrs={\"rows\": 3, \"placeholder\": \"Detalle opcional\"}),\n        }",
        "detail": "inventario.forms",
        "documentation": {}
    },
    {
        "label": "Categoria",
        "kind": 6,
        "importPath": "inventario.models",
        "description": "inventario.models",
        "peekOfCode": "class Categoria(models.Model):\n    \"\"\"\n    Categoría de producto (clasificación simple).\n    Campos:\n    - nombre (str, único): nombre visible de la categoría.\n    Meta:\n    - ordering por nombre para listados alfabéticos.\n    \"\"\"\n    nombre = models.CharField(max_length=100, unique=True)\n    class Meta:",
        "detail": "inventario.models",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "kind": 6,
        "importPath": "inventario.models",
        "description": "inventario.models",
        "peekOfCode": "class Proveedor(models.Model):\n    \"\"\"\n    Proveedor de productos.\n    Campos:\n    - nombre, direccion, telefono, email (opc), tipo_proveedor (empresa/particular)\n    - creado_en (auto_now_add)\n    Meta:\n    - ordering por nombre.\n    - (Opcional) UniqueConstraint por (nombre, telefono) para evitar duplicados exactos.\n    \"\"\"",
        "detail": "inventario.models",
        "documentation": {}
    },
    {
        "label": "Producto",
        "kind": 6,
        "importPath": "inventario.models",
        "description": "inventario.models",
        "peekOfCode": "class Producto(models.Model):\n    \"\"\"\n    Producto del inventario.\n    Campos principales:\n    - nombre, descripcion (opc)\n    - precio_compra (>= 0)\n    - stock (entero, >= 0)\n    - stock_minimo (entero, opcional, >= 0)\n    - proveedor (FK, PROTECT), categoria (FK, PROTECT)\n    - ganancia (0..100, %)",
        "detail": "inventario.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "inventario.urls",
        "description": "inventario.urls",
        "peekOfCode": "app_name = \"inventario\"\nurlpatterns = [\n    # ─────────────────────────────────────────────────────────────────────────\n    # HOME INVENTARIO\n    # GET /inventario/ → redirige a una vista existente (proveedores o productos)\n    # ─────────────────────────────────────────────────────────────────────────\n    path(\"\", views.inventario, name=\"inventario\"),\n    # ─────────────────────────────────────────────────────────────────────────\n    # PRODUCTOS\n    # ─────────────────────────────────────────────────────────────────────────",
        "detail": "inventario.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "inventario.urls",
        "description": "inventario.urls",
        "peekOfCode": "urlpatterns = [\n    # ─────────────────────────────────────────────────────────────────────────\n    # HOME INVENTARIO\n    # GET /inventario/ → redirige a una vista existente (proveedores o productos)\n    # ─────────────────────────────────────────────────────────────────────────\n    path(\"\", views.inventario, name=\"inventario\"),\n    # ─────────────────────────────────────────────────────────────────────────\n    # PRODUCTOS\n    # ─────────────────────────────────────────────────────────────────────────\n    path(\"producto/\", views.listar_productos, name=\"listar_productos\"),",
        "detail": "inventario.urls",
        "documentation": {}
    },
    {
        "label": "proveedor_crear",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def proveedor_crear(request):\n    next_url = request.GET.get(\"next\") or reverse(\"compras:agregar_compra\")\n    if request.method == \"POST\":\n        form = ProveedorForm(request.POST)\n        if form.is_valid():\n            proveedor = form.save()\n            messages.success(request, f\"Proveedor “{proveedor}” creado y preseleccionado.\")\n            # Redirige de vuelta a compras/crear con proveedor_id para preseleccionar\n            separator = \"&\" if \"?\" in next_url else \"?\"\n            return redirect(f\"{next_url}{separator}proveedor_id={proveedor.pk}\")",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "agregar_proveedor",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def agregar_proveedor(request):\n    \"\"\"\n    Crea un proveedor.\n    Flujo:\n    - GET: muestra formulario vacío.\n    - POST: valida y guarda; redirige a `next` si existe o al detalle (readonly).\n    Contexto:\n    form (ProveedorForm)\n    \"\"\"\n    next_url = request.GET.get(\"next\")",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "editar_proveedor",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def editar_proveedor(request, pk):\n    \"\"\"\n    Edita un proveedor existente.\n    Flujo:\n    - GET: carga formulario con instancia.\n    - POST: valida, guarda y redirige al detalle readonly (PRG).\n    \"\"\"\n    proveedor = get_object_or_404(Proveedor, pk=pk)\n    if request.method == \"POST\":\n        form = ProveedorForm(request.POST, instance=proveedor)",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "eliminar_proveedor",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def eliminar_proveedor(request, pk):\n    \"\"\"\n    Elimina un proveedor previa confirmación.\n    Template GET:\n    inventario/proveedores/listar_proveedor/eliminar_confirm_proveedor.html\n    \"\"\"\n    proveedor = get_object_or_404(Proveedor, pk=pk)\n    if request.method == \"POST\":\n        #proveedor.delete()\n        # Vacía cualquier mensaje previo para evitar duplicados",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "listar_proveedores",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def listar_proveedores(request):\n    \"\"\"\n    Lista paginada de proveedores.\n    Filtros:\n    - q: búsqueda por nombre/email/teléfono.\n    Template:\n    inventario/proveedores/listar_proveedor/listar_proveedor.html\n    \"\"\"\n    queryset = Proveedor.objects.all().order_by(\"-id\")\n    # Filtro simple opcional por ?q=",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "ver_proveedor",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def ver_proveedor(request, pk):\n    \"\"\"\n    Detalle readonly de Proveedor (reutiliza el template de edición).\n    \"\"\"\n    proveedor = get_object_or_404(Proveedor, pk=pk)\n    # Reusar el mismo template de EDITAR con el form deshabilitado\n    form = ProveedorForm(instance=proveedor)\n    for f in form.fields.values():\n        f.disabled = True\n    return render(",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "listar_productos",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def listar_productos(request):\n    \"\"\"\n    Versión básica de listar productos (compatibilidad con templates antiguos).\n    La versión extendida definida más abajo es la activa en tiempo de ejecución.\n    \"\"\"\n    qs = Producto.objects.select_related(\"proveedor\", \"categoria\").order_by(\"nombre\")\n    paginator = Paginator(qs, 20)\n    page_number = request.GET.get(\"page\")\n    page_obj = paginator.get_page(page_number)\n    # Paso variables amplias para no romper tus templates:",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "agregar_producto",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def agregar_producto(request):\n    \"\"\"\n    Crea un producto.\n    Flujo:\n    - GET: formulario vacío.\n    - POST: valida y guarda; redirige a ver_producto.\n    \"\"\"\n    if request.method == \"POST\":\n        data = request.POST.copy()\n        data[\"ganancia\"] = \"50\"  # fijo 50%",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "editar_producto",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def editar_producto(request, pk):\n    \"\"\"\n    Edita un producto.\n    Flujo:\n    - GET: formulario con instancia.\n    - POST: valida/guarda; redirige a ver_producto.\n    \"\"\"\n    prod = get_object_or_404(Producto, pk=pk)\n    if request.method == \"POST\":\n        data = request.POST.copy()",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "eliminar_producto",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def eliminar_producto(request, pk):\n    \"\"\"\n    Elimina un producto previa confirmación.\n    Template GET:\n    inventario/productos/listar_producto/eliminar_confirm_lista.html\n    \"\"\"\n    prod = get_object_or_404(Producto, pk=pk)\n    prod = get_object_or_404(Producto, pk=pk)\n    if request.method == \"POST\":\n        # Evitar mensajes duplicados en la cola",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "ver_producto",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def ver_producto(request, pk):\n    \"\"\"\n    Detalle SOLO LECTURA del producto (mismo layout que edición).\n    Extras:\n    - Calcula margen = precio_venta - precio_compra (Decimal a 2 decimales).\n    \"\"\"\n    producto = get_object_or_404(Producto, pk=pk)\n    # Reusar un form deshabilitado mantiene estilos/partials si los usas\n    form = ProductoForm(instance=producto)\n    for f in form.fields.values():",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "listar_productos",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def listar_productos(request):\n    \"\"\"\n    Lista de productos con filtros y paginación.\n    Filtros:\n    - q: texto en nombre o proveedor.\n    - categoria: ID exacto.\n    - estado: 'activos' | 'inactivos' | 'reposicion' (stock <= stock_minimo y stock_minimo > 0).\n    Contexto adicional:\n    - lista_categorias, estado_seleccionado, etc. para partials.\n    \"\"\"",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "producto_precio_api",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def producto_precio_api(request, pk):\n    \"\"\"\n    Devuelve info mínima del producto en JSON.\n    Respuesta:\n    { \"id\": int, \"nombre\": str, \"precio_unitario\": float }\n    Notas:\n    - Ajusta el atributo de precio según tu modelo (precio_compra/precio_unitario/costo).\n    - Devuelve 404 si el producto no existe.\n    \"\"\"\n    try:",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "inventario",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def inventario(request):\n    \"\"\"\n    Home de inventario: redirige a una vista existente (por defecto, proveedores).\n    \"\"\"\n    # Redirige al listado que SÍ existe (Proveedores, ya lo dejamos OK)\n    return redirect(\"inventario:listar_proveedores\")\n    # Si prefieres ir a productos, cambia por:\n    # return redirect(\"inventario:listar_productos\")\n    # Alias para compatibilidad con tu URL/plantillas antiguas\n# ─────────────────────────────────────────────────────────────────────────────",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "proveedor_crear",
        "kind": 2,
        "importPath": "inventario.views",
        "description": "inventario.views",
        "peekOfCode": "def proveedor_crear(request):\n    \"\"\"\n    Alias de `agregar_proveedor` para compatibilidad con rutas/plantillas antiguas.\n    \"\"\"\n    # Reusa la lógica de agregar_proveedor para no duplicar código\n    return agregar_proveedor(request)",
        "detail": "inventario.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "suministros.asgi",
        "description": "suministros.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "suministros.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-7f3)9bfdwd=u7nlhz^)9vd%!7^slb_$cc%o7*c%c6c3yqz*7ek'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-7f3)9bfdwd=u7nlhz^)9vd%!7^slb_$cc%o7*c%c6c3yqz*7ek'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    \"compras.apps.ComprasConfig\", # 👈 nuestra app",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    \"compras.apps.ComprasConfig\", # 👈 nuestra app\n    \"inventario.apps.InventarioConfig\", #v 👈 nuestra app\n    \"ventas.apps.VentasConfig\",",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware', # este middleware es necesario para proteger nuestra aplicación contra ataques de seguridad.\n    'django.contrib.sessions.middleware.SessionMiddleware', # este middleware es necesario para manejar las sesiones de usuario en nuestra aplicación.\n    'django.middleware.common.CommonMiddleware', # este middleware es necesario para manejar las solicitudes y respuestas de nuestra aplicación.\n    'django.middleware.csrf.CsrfViewMiddleware', # este middleware es necesario para manejar los formularios de autenticación y registro de usuarios en nuestra aplicación.\n    'django.contrib.auth.middleware.AuthenticationMiddleware', # este middleware es necesario para manejar las solicitudes y respuestas de nuestra aplicación.\n    'django.contrib.messages.middleware.MessageMiddleware', #  este middleware es necesario para manejar los mensajes de nuestra aplicación.\n    'django.middleware.clickjacking.XFrameOptionsMiddleware', #  este middleware es necesario para manejar los frames de clickjacking en nuestras solicitudes y respuestas de nuestra aplicación.\n]\n# --- Autenticación ---",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "LOGIN_URL = \"/accounts/login/\"\nLOGIN_REDIRECT_URL = \"/\"\nLOGOUT_REDIRECT_URL = \"/\"\nROOT_URLCONF = 'suministros.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, \"templates\")],# Si tienes templates globales, pon aquí su ruta\n        'APP_DIRS': True,\n        'OPTIONS': {",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = \"/\"\nLOGOUT_REDIRECT_URL = \"/\"\nROOT_URLCONF = 'suministros.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, \"templates\")],# Si tienes templates globales, pon aquí su ruta\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = \"/\"\nROOT_URLCONF = 'suministros.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, \"templates\")],# Si tienes templates globales, pon aquí su ruta\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "ROOT_URLCONF = 'suministros.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, \"templates\")],# Si tienes templates globales, pon aquí su ruta\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, \"templates\")],# Si tienes templates globales, pon aquí su ruta\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "WSGI_APPLICATION = 'suministros.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\n# ---------------------Base de datos creada en PGadmin Prostresql 17------------------------------\nDATABASES = {\n    'default': {\n        'ENGINE':'django.db.backends.postgresql',\n        'OPTIONS':{\n            'options':'-c client_encoding=UTF8',\n        },",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE':'django.db.backends.postgresql',\n        'OPTIONS':{\n            'options':'-c client_encoding=UTF8',\n        },\n        'NAME':'tecknosfera_db',\n        'USER':'postgres',\n        'PASSWORD':'niki2025',\n        'HOST':'localhost',",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "LANGUAGE_CODE = 'es'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Si tienes la carpeta static en el mismo nivel que manage.py:\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Si tienes la carpeta static en el mismo nivel que manage.py:\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Si tienes la carpeta static en el mismo nivel que manage.py:\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\n# Default primary key field type",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Si tienes la carpeta static en el mismo nivel que manage.py:\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Si tienes la carpeta static en el mismo nivel que manage.py:\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "suministros.settings",
        "description": "suministros.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "suministros.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "suministros.urls",
        "description": "suministros.urls",
        "peekOfCode": "urlpatterns = [\n    # Admin\n    path('admin/', admin.site.urls),\n    # Home global (con contexto dinámico de suministros/views.py)\n    path(\"\", views.index, name='home'),                 # ← http://127.0.0.1:8000/\n    # Apps\n    path(\"compras/\", include((\"compras.urls\", \"compras\"), namespace=\"compras\")),\n    path('inventario/', include(('inventario.urls', 'inventario'), namespace='inventario')),\n    path('ventas/', include(('ventas.urls', 'ventas'), namespace='ventas')),\n    path(\"dashboard/\", include((\"dashboard.urls\", \"dashboard\"), namespace=\"dashboard\")),  ",
        "detail": "suministros.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "suministros.views",
        "description": "suministros.views",
        "peekOfCode": "def index(request):\n    \"\"\"\n    Home:\n    - Si es cliente: saludo + gráfica de últimos 30 días de sus compras.\n    - Si NO es cliente: home 'pro' original con KPIs y tabla.\n    \"\"\"\n    user = request.user\n    if _es_cliente(user):\n        # ------- Serie últimos 30 días para ESTE usuario -------\n        hoy = timezone.localdate()",
        "detail": "suministros.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "suministros.wsgi",
        "description": "suministros.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "suministros.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "ventas.migrations.0001_initial",
        "description": "ventas.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('inventario', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Venta',\n            fields=[",
        "detail": "ventas.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "ventas.migrations.0002_venta_impuesto_porcentaje",
        "description": "ventas.migrations.0002_venta_impuesto_porcentaje",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('ventas', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='venta',\n            name='impuesto_porcentaje',\n            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))]),\n        ),",
        "detail": "ventas.migrations.0002_venta_impuesto_porcentaje",
        "documentation": {}
    },
    {
        "label": "VentaAdmin",
        "kind": 6,
        "importPath": "ventas.admin",
        "description": "ventas.admin",
        "peekOfCode": "class VentaAdmin(admin.ModelAdmin):\n    list_display = ('cliente', 'fecha', 'impuesto', 'descuento_total', 'total', 'creado_en', 'actualizado_en')\nclass Venta_ProductoAdmin(admin.ModelAdmin):\n    list_display = ('venta', 'producto', 'cantidad', 'precio_unitario','descuento', 'creado_en')\nadmin.site.register(Venta, VentaAdmin)\nadmin.site.register(VentaProducto, Venta_ProductoAdmin)",
        "detail": "ventas.admin",
        "documentation": {}
    },
    {
        "label": "Venta_ProductoAdmin",
        "kind": 6,
        "importPath": "ventas.admin",
        "description": "ventas.admin",
        "peekOfCode": "class Venta_ProductoAdmin(admin.ModelAdmin):\n    list_display = ('venta', 'producto', 'cantidad', 'precio_unitario','descuento', 'creado_en')\nadmin.site.register(Venta, VentaAdmin)\nadmin.site.register(VentaProducto, Venta_ProductoAdmin)",
        "detail": "ventas.admin",
        "documentation": {}
    },
    {
        "label": "VentasConfig",
        "kind": 6,
        "importPath": "ventas.apps",
        "description": "ventas.apps",
        "peekOfCode": "class VentasConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'ventas'",
        "detail": "ventas.apps",
        "documentation": {}
    },
    {
        "label": "VentaForm",
        "kind": 6,
        "importPath": "ventas.forms",
        "description": "ventas.forms",
        "peekOfCode": "class VentaForm(forms.ModelForm):\n    class Meta:\n        model = Venta\n        # SOLO los campos que el usuario rellena\n        fields = [\"cliente\", \"fecha\", \"descuento_total\", \"impuesto\"]\n        widgets = {\"fecha\": forms.DateInput(attrs={\"type\": \"date\"}),}\n    def clean_descuento_total(self):\n        v = self.cleaned_data.get(\"descuento_total\")\n        return v or Decimal(\"0.00\")\n    def clean_impuesto(self):",
        "detail": "ventas.forms",
        "documentation": {}
    },
    {
        "label": "VentaProductoForm",
        "kind": 6,
        "importPath": "ventas.forms",
        "description": "ventas.forms",
        "peekOfCode": "class VentaProductoForm(forms.ModelForm):\n    class Meta:\n        model = VentaProducto\n        fields = [\"producto\", \"cantidad\", \"precio_unitario\"]\n# *** ESTO ES LO CLAVE ***\nVentaProductoFormSet = inlineformset_factory(\n    parent_model=Venta,\n    model=VentaProducto,\n    form=VentaProductoForm,\n    extra=1,",
        "detail": "ventas.forms",
        "documentation": {}
    },
    {
        "label": "VentaProductoFormSet",
        "kind": 5,
        "importPath": "ventas.forms",
        "description": "ventas.forms",
        "peekOfCode": "VentaProductoFormSet = inlineformset_factory(\n    parent_model=Venta,\n    model=VentaProducto,\n    form=VentaProductoForm,\n    extra=1,\n    can_delete=True,\n    validate_min=True,  # pon True y min_num=1 si quieres exigir al menos 1 línea\n    min_num=1,\n)",
        "detail": "ventas.forms",
        "documentation": {}
    },
    {
        "label": "Venta",
        "kind": 6,
        "importPath": "ventas.models",
        "description": "ventas.models",
        "peekOfCode": "class Venta(models.Model):\n    cliente = models.ForeignKey(User, on_delete=models.PROTECT, related_name='ventas')\n    fecha = models.DateField(default=timezone.localdate)  # editable por el usuario si hace falta\n    subtotal = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'))\n    impuesto = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'))\n    impuesto_porcentaje = models.DecimalField(max_digits=5,decimal_places=2,default=Decimal('0.00'),\n    validators=[MinValueValidator(Decimal('0')), MaxValueValidator(Decimal('100'))]\n)\n    descuento_total = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'))\n    total = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'))",
        "detail": "ventas.models",
        "documentation": {}
    },
    {
        "label": "VentaProducto",
        "kind": 6,
        "importPath": "ventas.models",
        "description": "ventas.models",
        "peekOfCode": "class VentaProducto(models.Model):\n    venta = models.ForeignKey(Venta, on_delete=models.CASCADE, related_name='detalles')\n    producto = models.ForeignKey('inventario.Producto', on_delete=models.PROTECT, related_name='ventas')\n    cantidad = models.PositiveIntegerField(validators=[MinValueValidator(1)])\n    precio_unitario = models.DecimalField(max_digits=12, decimal_places=2, validators=[MinValueValidator(Decimal('0'))])\n    # Opción: porcentaje de descuento por línea (0–100)\n    descuento = models.DecimalField(max_digits=5, decimal_places=2, default=Decimal('0.00'),\n                                    validators=[MinValueValidator(Decimal('0')), MaxValueValidator(Decimal('100'))])\n    creado_en = models.DateTimeField(auto_now_add=True)\n    class Meta:",
        "detail": "ventas.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "ventas.models",
        "description": "ventas.models",
        "peekOfCode": "User = get_user_model()\nclass Venta(models.Model):\n    cliente = models.ForeignKey(User, on_delete=models.PROTECT, related_name='ventas')\n    fecha = models.DateField(default=timezone.localdate)  # editable por el usuario si hace falta\n    subtotal = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'))\n    impuesto = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'))\n    impuesto_porcentaje = models.DecimalField(max_digits=5,decimal_places=2,default=Decimal('0.00'),\n    validators=[MinValueValidator(Decimal('0')), MaxValueValidator(Decimal('100'))]\n)\n    descuento_total = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'))",
        "detail": "ventas.models",
        "documentation": {}
    },
    {
        "label": "calcular_y_guardar_totales_venta",
        "kind": 2,
        "importPath": "ventas.services",
        "description": "ventas.services",
        "peekOfCode": "def calcular_y_guardar_totales_venta(\n    venta: Venta,\n    tasa_impuesto_pct: Decimal | None = None\n) -> Venta:\n    total_linea_expr = ExpressionWrapper(\n        F(\"cantidad\") * F(\"precio_unitario\") * (1 - (F(\"descuento\") / 100.0)),\n        output_field=DecimalField(max_digits=16, decimal_places=6),\n    )\n    agg = VentaProducto.objects.filter(venta=venta).aggregate(subtotal=Sum(total_linea_expr))\n    subtotal_calc = agg[\"subtotal\"] or Decimal(\"0\")",
        "detail": "ventas.services",
        "documentation": {}
    },
    {
        "label": "aplicar_stock_despues_de_crear_venta",
        "kind": 2,
        "importPath": "ventas.services",
        "description": "ventas.services",
        "peekOfCode": "def aplicar_stock_despues_de_crear_venta(venta: Venta) -> None:\n    \"\"\"\n    Resta del stock la cantidad de cada línea de venta.\n    \"\"\"\n    for linea in VentaProducto.objects.select_related(\"producto\").filter(venta=venta).order_by(\"id\"):\n        _aplicar_delta_stock_seguro(linea.producto_id, -linea.cantidad)  # resta\n# ==== Stock en edición de venta (no depende de related_name) ====\n@transaction.atomic\ndef reconciliar_stock_tras_editar_venta(\n    venta: Venta,",
        "detail": "ventas.services",
        "documentation": {}
    },
    {
        "label": "reconciliar_stock_tras_editar_venta",
        "kind": 2,
        "importPath": "ventas.services",
        "description": "ventas.services",
        "peekOfCode": "def reconciliar_stock_tras_editar_venta(\n    venta: Venta,\n    lineas_previas: Dict[int, Tuple[int, Decimal]],\n) -> None:\n    \"\"\"\n    - Eliminadas  → devolver al producto viejo (+cantidad_anterior).\n    - Nuevas      → restar del producto nuevo (-cantidad_actual).\n    - Persisten   → si mismo producto: restar delta; si cambió: devolver viejo y restar nuevo.\n    \"\"\"\n    lineas_actuales_qs = VentaProducto.objects.filter(venta=venta)",
        "detail": "ventas.services",
        "documentation": {}
    },
    {
        "label": "ALLOW_SOFT_MINIMO_EN_VENTA",
        "kind": 5,
        "importPath": "ventas.services",
        "description": "ventas.services",
        "peekOfCode": "ALLOW_SOFT_MINIMO_EN_VENTA = True  # política blanda en ventas\ndef _aplicar_delta_stock_seguro(producto_id: int, delta_unidades):\n    \"\"\"\n    Ajusta el stock de forma atómica.\n    Reglas:\n    - Nunca permite stock negativo (bloquea).\n    - Si delta < 0 (venta) y el nuevo stock quedaría por debajo del stock_minimo:\n        * Con política BLANDA (ALLOW_SOFT_MINIMO_EN_VENTA=True): baja automáticamente\n        stock_minimo al nuevo stock en la MISMA UPDATE (LEAST) para no violar el CHECK.\n        * Con política DURA: lanza ValidationError.",
        "detail": "ventas.services",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "ventas.urls",
        "description": "ventas.urls",
        "peekOfCode": "app_name = \"ventas\"\nurlpatterns = [\n    # LISTADO\n    path(\"ver/\", views.ver_ventas, name=\"ver_ventas\"),\n    # DETALLE / VER (solo lectura)\n    path(\"detalle/<int:pk>/\", views.ver_venta, name=\"detalle\"),   # alias usado por redirects\n    path(\"ver/<int:pk>/\",      views.ver_venta, name=\"ver_venta\"),\n    # EDITAR\n    path(\"editar/<int:pk>/\", views.editar_venta, name=\"editar_venta\"),\n    # ELIMINAR",
        "detail": "ventas.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ventas.urls",
        "description": "ventas.urls",
        "peekOfCode": "urlpatterns = [\n    # LISTADO\n    path(\"ver/\", views.ver_ventas, name=\"ver_ventas\"),\n    # DETALLE / VER (solo lectura)\n    path(\"detalle/<int:pk>/\", views.ver_venta, name=\"detalle\"),   # alias usado por redirects\n    path(\"ver/<int:pk>/\",      views.ver_venta, name=\"ver_venta\"),\n    # EDITAR\n    path(\"editar/<int:pk>/\", views.editar_venta, name=\"editar_venta\"),\n    # ELIMINAR\n    path(\"eliminar/<int:pk>/\", views.eliminar_venta, name=\"eliminar_venta\"),",
        "detail": "ventas.urls",
        "documentation": {}
    },
    {
        "label": "crear_venta",
        "kind": 2,
        "importPath": "ventas.views",
        "description": "ventas.views",
        "peekOfCode": "def crear_venta(request):\n    PREFIX = \"lineas\"\n    if request.method == \"POST\":\n        data = request.POST.copy()\n        if data.get(\"descuento_total\") in (None, \"\"):\n            data[\"descuento_total\"] = \"0\"\n        form = VentaForm(data)\n        if form.is_valid():\n            venta = form.save(commit=False)\n            # MODO CLIENTE: auto-asignar el cliente a quien crea la venta",
        "detail": "ventas.views",
        "documentation": {}
    },
    {
        "label": "editar_venta",
        "kind": 2,
        "importPath": "ventas.views",
        "description": "ventas.views",
        "peekOfCode": "def editar_venta(request, pk):\n    venta = get_object_or_404(Venta, pk=pk)\n    # MODO CLIENTE: sólo puede editar sus propias ventas\n    if _es_cliente(request.user) and getattr(venta, \"cliente_id\", None) != request.user.pk:\n        raise PermissionDenied(\"No puedes editar ventas de otros usuarios.\")\n    estado_previo = {l.pk: (l.producto_id, l.cantidad) for l in venta.detalles.all()}\n    if request.method == \"POST\":\n        data = request.POST.copy()\n        if data.get(\"descuento_total\") in (None, \"\"):\n            data[\"descuento_total\"] = \"0\"",
        "detail": "ventas.views",
        "documentation": {}
    },
    {
        "label": "ver_ventas",
        "kind": 2,
        "importPath": "ventas.views",
        "description": "ventas.views",
        "peekOfCode": "def ver_ventas(request):\n    ventas_qs = Venta.objects.select_related(\"cliente\").order_by(\"-fecha\", \"-id\")\n    # MODO CLIENTE: sólo ve sus ventas\n    if _es_cliente(request.user):\n        ventas_qs = ventas_qs.filter(cliente_id=request.user.pk)\n    q = request.GET.get(\"q\", \"\").strip()\n    desde = request.GET.get(\"desde\")\n    hasta = request.GET.get(\"hasta\")\n    cliente_id = request.GET.get(\"cliente\")\n    if q:",
        "detail": "ventas.views",
        "documentation": {}
    },
    {
        "label": "ver_venta",
        "kind": 2,
        "importPath": "ventas.views",
        "description": "ventas.views",
        "peekOfCode": "def ver_venta(request, pk):\n    venta = get_object_or_404(Venta.objects.select_related(\"cliente\"), pk=pk)\n    # MODO CLIENTE: sólo puede ver sus propias ventas\n    if _es_cliente(request.user) and getattr(venta, \"cliente_id\", None) != request.user.pk:\n        raise PermissionDenied(\"No puedes ver ventas de otros usuarios.\")\n    form = VentaForm(instance=venta)\n    for f in form.fields.values():\n        f.disabled = True\n    formset = VentaProductoFormSet(instance=venta)\n    for frm in formset.forms:",
        "detail": "ventas.views",
        "documentation": {}
    },
    {
        "label": "eliminar_venta",
        "kind": 2,
        "importPath": "ventas.views",
        "description": "ventas.views",
        "peekOfCode": "def eliminar_venta(request, pk):\n    venta = get_object_or_404(Venta, pk=pk)\n    # MODO CLIENTE: sólo puede eliminar sus propias ventas (si tu negocio lo permite)\n    if _es_cliente(request.user) and getattr(venta, \"cliente_id\", None) != request.user.pk:\n        raise PermissionDenied(\"No puedes eliminar ventas de otros usuarios.\")\n    if request.method == \"POST\":\n        try:\n            venta.delete()\n            messages.success(request, \"Venta eliminada correctamente.\")\n        except (ProtectedError, IntegrityError):",
        "detail": "ventas.views",
        "documentation": {}
    },
    {
        "label": "calcular_y_guardar_totales_venta",
        "kind": 2,
        "importPath": "ventas.views",
        "description": "ventas.views",
        "peekOfCode": "def calcular_y_guardar_totales_venta(venta: Venta, tasa_impuesto_pct: Decimal | None = None) -> Venta:\n    \"\"\"\n    Recalcula subtotal, impuesto (importe) y total de una VENTA, guardándolos en la BD.\n    - Suma en BD: SUM(cantidad * precio_unitario)\n    - Respeta venta.descuento_total (importe absoluto)\n    - Si se pasa `tasa_impuesto_pct` (ej. 0.23), recalcula `venta.impuesto` como base * tasa\n    - total = subtotal - descuento_total + impuesto\n    \"\"\"\n    total_linea = ExpressionWrapper(\n        F(\"cantidad\") * F(\"precio_unitario\"),",
        "detail": "ventas.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "ventas.views",
        "description": "ventas.views",
        "peekOfCode": "User = get_user_model()\n# ─────────────────────────────────────────────────────────────────────────────\n# Helper: detectar \"modo cliente\"\n# Criterio: puede ver/crear ventas, pero NO tiene permisos de compras ni inventario.\n# (Excluye naturalmente a superusuarios, que tienen todo permitido.)\n# ─────────────────────────────────────────────────────────────────────────────\ndef _es_cliente(user) -> bool:\n    if user.is_superuser or user.is_staff:\n        return False\n    return (",
        "detail": "ventas.views",
        "documentation": {}
    },
    {
        "label": "agregar_venta",
        "kind": 5,
        "importPath": "ventas.views",
        "description": "ventas.views",
        "peekOfCode": "agregar_venta = crear_venta  # alias\n# ─────────────────────────────────────────────────────────────────────────────\n# EDITAR\n# ─────────────────────────────────────────────────────────────────────────────\n@login_required\n@permission_required(\"ventas.change_venta\", raise_exception=True)\n@transaction.atomic\ndef editar_venta(request, pk):\n    venta = get_object_or_404(Venta, pk=pk)\n    # MODO CLIENTE: sólo puede editar sus propias ventas",
        "detail": "ventas.views",
        "documentation": {}
    },
    {
        "label": "detalle",
        "kind": 5,
        "importPath": "ventas.views",
        "description": "ventas.views",
        "peekOfCode": "detalle = ver_venta  # alias\n# ─────────────────────────────────────────────────────────────────────────────\n# ELIMINAR\n# ─────────────────────────────────────────────────────────────────────────────\n@login_required\n@permission_required(\"ventas.delete_venta\", raise_exception=True)\n@transaction.atomic\ndef eliminar_venta(request, pk):\n    venta = get_object_or_404(Venta, pk=pk)\n    # MODO CLIENTE: sólo puede eliminar sus propias ventas (si tu negocio lo permite)",
        "detail": "ventas.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'suministros.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]